<?php namespace Dubpub\Publisher\Models;

use PHPUnit_Framework_MockObject_MockObject as Mock;
use Symfony\Component\Console\Input\InputInterface;

class PublishModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PublishModel|Mock
     */
    protected $testInstance;
    /**
     * @var InputInterface|Mock
     */
    protected $inputMock;

    protected function setUp()
    {
        parent::setUp();
        $this->inputMock = $this->getMock(InputInterface::class);
    }

    protected function prepareInput($badInput = false)
    {

        $this->inputMock->expects($this->any())->method('getArgument')
            ->will($this->returnCallback(function () {
                switch ($agr = func_get_arg(0)) {
                    case 'package':
                    case 'group':
                        return '*';
                    default:
                        var_dump($agr) || die;
                }
            }));

        $this->inputMock->expects($this->any())->method('getOption')
            ->will($this->returnCallback(function () use ($badInput) {
                switch ($agr = func_get_arg(0)) {
                    case 'configPath':
                    case 'publishPath':
                        return $badInput ? uniqid() : getcwd();
                    default:
                        var_dump($agr) || die;
                }
            }));

    }

    public function testFailPaths()
    {
        $this->prepareInput();
        $model = new PublishModel($this->inputMock);

        $this->assertSame('*', $model->getPackageEntry());
        $this->assertSame('*', $model->getGroupEntry());
        $this->assertSame(getcwd(), $model->getConfigPath());
        $this->assertSame(getcwd(), $model->getPublishPath());
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
