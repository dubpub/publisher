<?php namespace Dubpub\Publisher\Models;

use PHPUnit_Framework_MockObject_MockObject as Mock;
use Symfony\Component\Console\Input\InputInterface;

class PublishModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var PublishModel|Mock
     */
    protected $testInstance;
    /**
     * @var InputInterface|Mock
     */
    protected $inputMock;

    protected function setUp()
    {
        parent::setUp();
        $this->inputMock = $this->getMock(InputInterface::class);
    }

    public function testFailConfigPath()
    {
        $this->inputMock->expects($this->any())->method('getOption')->will($this->returnCallback(function () {
            return uniqid();
        }));

        try {
            $model = new PublishModel($this->inputMock);
        } catch (\Exception $exception) {
            $this->assertTrue($exception instanceof \InvalidArgumentException);
        }
    }

    public function testFailPublishPath()
    {

        $this->inputMock->expects($this->any())->method('getArgument')->will($this->returnCallback(function () {
            switch (func_get_arg(0)) {
                case 'publishPath':
                    return uniqid();
            }
        }));

        $this->inputMock->expects($this->any())->method('getOption')->will($this->returnValue(TEST_PATH));


        try {
            $model = new PublishModel($this->inputMock);
            $model->validate();
        } catch (\Exception $exception) {
            $this->assertTrue($exception instanceof \InvalidArgumentException);
        }
    }

    public function testFailPackageEntry()
    {

        $this->inputMock->expects($this->any())->method('getArgument')->will($this->returnCallback(function () {
            switch (func_get_arg(0)) {
                case 'publishPath':
                    return TEST_PATH;
                case 'package':
                    return uniqid();
            }
        }));

        $this->inputMock->expects($this->any())->method('getOption')->will($this->returnValue(TEST_PATH));


        try {
            $model = new PublishModel($this->inputMock);
            $model->validate();
        } catch (\Exception $exception) {
            $this->assertTrue($exception instanceof \InvalidArgumentException);
        }
    }

    public function testValid()
    {
        $this->inputMock->expects($this->any())->method('getArgument')->will($this->returnCallback(function () {
            switch (func_get_arg(0)) {
                case 'publishPath':
                    return TEST_PATH;
                case 'package':
                    return 'vendor/package';
            }
        }));

        $this->inputMock->expects($this->any())->method('getOption')->will($this->returnValue(TEST_PATH));

        $model = new PublishModel($this->inputMock);
        $model->validate();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
    }
}
